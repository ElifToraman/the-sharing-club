{"ast":null,"code":"var _jsxFileName = \"/Users/eliftoraman/Desktop/The-Sharing-Club/frontend-tasks-main/src/tasks/components/NewTask.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { VALIDATOR_REQUIRE, VALIDATOR_MINLENGTH } from \"../../shared/util/validators\";\nimport { useForm } from \"../../shared/hooks/form-hook\";\nimport Input from \"../../shared/components/FormElements/Input\";\nimport Button from \"../../shared/components/FormElements/Button\";\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\nimport { AuthContext } from \"../../shared/context/auth-context\";\nimport \"./TaskForm.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst NewTask = () => {\n  _s();\n\n  const auth = useContext(AuthContext);\n  const groupId = useParams().groupId;\n  const {\n    isLoading,\n    error,\n    sendRequest,\n    clearError\n  } = useHttpClient();\n  const [formState, inputHandler] = useForm({\n    title: {\n      value: '',\n      isValid: false\n    },\n    description: {\n      value: '',\n      isValid: false\n    },\n    score: {\n      value: null,\n      isValid: false\n    }\n  }, false);\n  const history = useHistory();\n\n  const taskSubmitHandler = async event => {\n    event.preventDefault();\n\n    try {\n      await sendRequest('http://localhost:5000/api/tasks', 'POST', JSON.stringify({\n        title: formState.inputs.title.value,\n        description: formState.inputs.description.value,\n        score: formState.inputs.score.value,\n        groupId: groupId,\n        creator: auth.userId\n      }), {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + auth.token\n      });\n      history.push('/groups/' + groupId + '/details');\n    } catch (err) {}\n  };\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(ErrorModal, {\n      error: error,\n      onClear: clearError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"task-form\",\n      onSubmit: taskSubmitHandler,\n      children: [isLoading && /*#__PURE__*/_jsxDEV(LoadingSpinner, {\n        asOverlay: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 31\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        id: \"title\",\n        element: \"input\",\n        type: \"text\",\n        label: \"Title\",\n        validators: [VALIDATOR_REQUIRE()],\n        errorText: \"Please enter a valid title.\",\n        onInput: inputHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        id: \"description\",\n        element: \"textarea\",\n        label: \"Description\",\n        validators: [VALIDATOR_MINLENGTH(5)],\n        errorText: \"Please enter a valid description (at least 5 characters).\",\n        onInput: inputHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        id: \"score\",\n        element: \"input\",\n        label: \"Score\",\n        validators: [VALIDATOR_REQUIRE()],\n        errorText: \"Please enter a valid score.\",\n        onInput: inputHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"submit\",\n        disabled: !formState.isValid,\n        children: \"ADD TASK\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 9\n  }, this);\n};\n\n_s(NewTask, \"suMa+Fv032bt8NkSYTi63daRVqQ=\", false, function () {\n  return [useParams, useHttpClient, useForm, useHistory];\n});\n\n_c = NewTask;\nexport default NewTask;\n\nvar _c;\n\n$RefreshReg$(_c, \"NewTask\");","map":{"version":3,"names":["React","useContext","useHistory","useParams","VALIDATOR_REQUIRE","VALIDATOR_MINLENGTH","useForm","Input","Button","ErrorModal","LoadingSpinner","useHttpClient","AuthContext","NewTask","auth","groupId","isLoading","error","sendRequest","clearError","formState","inputHandler","title","value","isValid","description","score","history","taskSubmitHandler","event","preventDefault","JSON","stringify","inputs","creator","userId","Authorization","token","push","err"],"sources":["/Users/eliftoraman/Desktop/The-Sharing-Club/frontend-tasks-main/src/tasks/components/NewTask.js"],"sourcesContent":["import React, {useContext} from \"react\";\nimport {useHistory, useParams} from \"react-router-dom\";\nimport {\n    VALIDATOR_REQUIRE,\n    VALIDATOR_MINLENGTH\n} from \"../../shared/util/validators\";\n\nimport {useForm} from \"../../shared/hooks/form-hook\";\nimport Input from \"../../shared/components/FormElements/Input\";\nimport Button from \"../../shared/components/FormElements/Button\";\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\nimport {useHttpClient} from \"../../shared/hooks/http-hook\";\nimport {AuthContext} from \"../../shared/context/auth-context\";\nimport \"./TaskForm.css\";\n\nconst NewTask = () => {\n    const auth = useContext(AuthContext);\n    const groupId = useParams().groupId;\n    const {isLoading, error, sendRequest, clearError} = useHttpClient();\n    const [formState, inputHandler]= useForm(\n        {\n        title: {\n            value: '',\n            isValid: false\n        },\n        description: {\n            value: '',\n            isValid: false\n        },\n        score: {\n            value: null,\n            isValid: false\n        }\n    }, false);\n\n    const history = useHistory();\n\n    const taskSubmitHandler = async event => {\n        event.preventDefault();\n        try {\n            await sendRequest(\n                'http://localhost:5000/api/tasks',\n                'POST',\n                JSON.stringify({\n                    title: formState.inputs.title.value,\n                    description: formState.inputs.description.value,\n                    score: formState.inputs.score.value,\n                    groupId: groupId,\n                    creator: auth.userId\n                }),\n                {\n                    'Content-Type': 'application/json',\n                    Authorization: 'Bearer ' + auth.token\n                }\n            );\n            history.push('/groups/' + groupId + '/details')\n        } catch (err) {}\n    };\n    return (\n        <React.Fragment>\n            <ErrorModal error={error} onClear={clearError}/>\n            <form className=\"task-form\" onSubmit={taskSubmitHandler}>\n                {isLoading && <LoadingSpinner asOverlay />}\n                <Input\n                    id=\"title\"\n                    element=\"input\"\n                    type=\"text\"\n                    label=\"Title\"\n                    validators={[VALIDATOR_REQUIRE()]}\n                    errorText=\"Please enter a valid title.\"\n                    onInput={inputHandler}\n                />\n                <Input\n                    id=\"description\"\n                    element=\"textarea\"\n                    label=\"Description\"\n                    validators={[VALIDATOR_MINLENGTH(5)]}\n                    errorText=\"Please enter a valid description (at least 5 characters).\"\n                    onInput={inputHandler}\n                />\n                <Input\n                    id=\"score\"\n                    element=\"input\"\n                    label=\"Score\"\n                    validators={[VALIDATOR_REQUIRE()]}\n                    errorText=\"Please enter a valid score.\"\n                    onInput={inputHandler}\n                />\n                <Button type=\"submit\" disabled={!formState.isValid}>\n                    ADD TASK\n                </Button>\n            </form>\n        </React.Fragment>\n    );\n};\n\nexport default NewTask;"],"mappings":"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"},"metadata":{},"sourceType":"module"}