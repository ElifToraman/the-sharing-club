{"ast":null,"code":"var _jsxFileName = \"/Users/eliftoraman/Desktop/The-Sharing-Club/frontend-tasks-main/src/tasks/components/UpdateTask.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useContext } from \"react\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport Button from \"../../shared/components/FormElements/Button\";\nimport Input from \"../../shared/components/FormElements/Input\";\nimport Card from \"../../shared/components/UIElements/Card\";\nimport { VALIDATOR_REQUIRE, VALIDATOR_MINLENGTH } from \"../../shared/util/validators\";\nimport { useForm } from \"../../shared/hooks/form-hook\";\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\nimport { AuthContext } from \"../../shared/context/auth-context\";\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\nimport \"./TaskForm.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst UpdateTask = () => {\n  _s();\n\n  const auth = useContext(AuthContext);\n  const {\n    isLoading,\n    error,\n    sendRequest,\n    clearError\n  } = useHttpClient();\n  const [loadedTask, setLoadedTask] = useState();\n  const taskId = useParams().taskId;\n  const history = useHistory();\n  const [formState, inputHandler, setFormData] = useForm({\n    title: {\n      value: '',\n      isValid: false\n    },\n    description: {\n      value: '',\n      isValid: false\n    }\n  }, false);\n  useEffect(() => {\n    const fetchTask = async () => {\n      try {\n        const responseData = await sendRequest(`http://localhost:5000/api/tasks/${taskId}`);\n        setLoadedTask(responseData.task);\n        setFormData({\n          title: {\n            value: responseData.task.title,\n            isValid: true\n          },\n          description: {\n            value: responseData.task.description,\n            isValid: true\n          }\n        }, true);\n      } catch (err) {}\n    };\n\n    fetchTask();\n  }, [sendRequest, taskId, setFormData]);\n\n  const taskUpdateSubmitHandler = async event => {\n    event.preventDefault();\n\n    try {\n      await sendRequest(`http://localhost:5000/api/tasks/${taskId}`, 'PATCH', JSON.stringify({\n        title: formState.inputs.title.value,\n        description: formState.inputs.description.value\n      }), {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + auth.token\n      });\n      history.goBack();\n    } catch (err) {}\n  };\n\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"center\",\n      children: /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this);\n  }\n\n  if (!loadedTask && !error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"center\",\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Could not find task!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(ErrorModal, {\n      error: error,\n      onClear: clearError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this), !isLoading && loadedTask && /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"task-form\",\n      onSubmit: taskUpdateSubmitHandler,\n      children: [/*#__PURE__*/_jsxDEV(Input, {\n        id: \"title\",\n        element: \"input\",\n        type: \"text\",\n        label: \"Title\",\n        validators: [VALIDATOR_REQUIRE()],\n        errorText: \"Please enter a valid title.\",\n        onInput: inputHandler,\n        initialValue: loadedTask.title,\n        initialValid: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        id: \"description\",\n        element: \"textarea\",\n        label: \"Description\",\n        validators: [VALIDATOR_MINLENGTH(5)],\n        errorText: \"Please enter a valid description (min. 5 characters).\",\n        onInput: inputHandler,\n        initialValue: loadedTask.description,\n        initialValid: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"submit\",\n        disabled: !formState.isValid,\n        children: \"UPDATE TASK\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 17\n    }, this), \";\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 9\n  }, this);\n};\n\n_s(UpdateTask, \"9seBDJPSDHcDfpgGP3C4BxEzLRo=\", false, function () {\n  return [useHttpClient, useParams, useHistory, useForm];\n});\n\n_c = UpdateTask;\nexport default UpdateTask;\n\nvar _c;\n\n$RefreshReg$(_c, \"UpdateTask\");","map":{"version":3,"names":["React","useEffect","useState","useContext","useParams","useHistory","Button","Input","Card","VALIDATOR_REQUIRE","VALIDATOR_MINLENGTH","useForm","useHttpClient","AuthContext","LoadingSpinner","ErrorModal","UpdateTask","auth","isLoading","error","sendRequest","clearError","loadedTask","setLoadedTask","taskId","history","formState","inputHandler","setFormData","title","value","isValid","description","fetchTask","responseData","task","err","taskUpdateSubmitHandler","event","preventDefault","JSON","stringify","inputs","Authorization","token","goBack"],"sources":["/Users/eliftoraman/Desktop/The-Sharing-Club/frontend-tasks-main/src/tasks/components/UpdateTask.js"],"sourcesContent":["import React, {useEffect, useState, useContext} from \"react\";\nimport {useParams, useHistory} from \"react-router-dom\";\n\nimport Button from \"../../shared/components/FormElements/Button\";\nimport Input from \"../../shared/components/FormElements/Input\";\nimport Card from \"../../shared/components/UIElements/Card\"\nimport {\n    VALIDATOR_REQUIRE,\n    VALIDATOR_MINLENGTH\n} from \"../../shared/util/validators\";\n\nimport {useForm} from \"../../shared/hooks/form-hook\";\nimport {useHttpClient} from \"../../shared/hooks/http-hook\";\nimport {AuthContext} from \"../../shared/context/auth-context\";\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\nimport \"./TaskForm.css\";\n\nconst UpdateTask = () => {\n    const auth = useContext(AuthContext);\n    const {isLoading, error, sendRequest, clearError} = useHttpClient();\n    const [loadedTask, setLoadedTask] =  useState();\n    const taskId = useParams().taskId;\n    const history = useHistory();\n    const [formState, inputHandler, setFormData] = useForm(\n        {\n            title: {\n                value: '',\n                isValid: false\n            },\n            description: {\n                value: '',\n                isValid: false\n            }\n    }, false)\n\n    useEffect(() => {\n        const fetchTask = async () => {\n            try {\n                const responseData = await sendRequest(`http://localhost:5000/api/tasks/${taskId}`);\n                setLoadedTask(responseData.task);\n                setFormData(\n                    {\n                        title: {\n                            value: responseData.task.title,\n                            isValid: true\n                        },\n                        description: {\n                            value: responseData.task.description,\n                            isValid: true\n                        }\n                    }, true\n                );\n            } catch (err) {}\n        };\n        fetchTask();\n    },[sendRequest, taskId, setFormData]);\n\n\n    const taskUpdateSubmitHandler = async event => {\n        event.preventDefault();\n        try {\n            await sendRequest(\n                `http://localhost:5000/api/tasks/${taskId}`,\n                'PATCH',\n                JSON.stringify({\n                    title: formState.inputs.title.value,\n                    description: formState.inputs.description.value\n                }),\n                {\n                    'Content-Type': 'application/json',\n                    Authorization: 'Bearer ' + auth.token\n                }\n            );\n            history.goBack();\n        } catch (err) {}\n    };\n\n    if (isLoading) {\n        return (\n            <div className=\"center\">\n                <LoadingSpinner />\n            </div>\n        );\n    }\n\n    if(!loadedTask && !error) {\n        return (\n            <div className=\"center\">\n                <Card>\n                    <h2>Could not find task!</h2>\n                </Card>\n            </div>\n        );\n    }\n\n    return (\n        <React.Fragment>\n            <ErrorModal error={error} onClear={clearError} />\n            {!isLoading && loadedTask && (\n                <form className=\"task-form\" onSubmit={taskUpdateSubmitHandler}>\n                <Input\n                    id=\"title\"\n                    element=\"input\"\n                    type=\"text\"\n                    label=\"Title\"\n                    validators={[VALIDATOR_REQUIRE()]}\n                    errorText=\"Please enter a valid title.\"\n                    onInput={inputHandler}\n                    initialValue={loadedTask.title}\n                    initialValid={true}\n                />\n                <Input\n                    id=\"description\"\n                    element=\"textarea\"\n                    label=\"Description\"\n                    validators={[VALIDATOR_MINLENGTH(5)]}\n                    errorText=\"Please enter a valid description (min. 5 characters).\"\n                    onInput={inputHandler}\n                    initialValue={loadedTask.description}\n                    initialValid={true}\n                />\n                <Button type=\"submit\" disabled={!formState.isValid}>\n                    UPDATE TASK\n                </Button>\n            </form>\n            )};\n        </React.Fragment>\n    );\n};\n\nexport default UpdateTask;"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,EAAoCC,UAApC,QAAqD,OAArD;AACA,SAAQC,SAAR,EAAmBC,UAAnB,QAAoC,kBAApC;AAEA,OAAOC,MAAP,MAAmB,6CAAnB;AACA,OAAOC,KAAP,MAAkB,4CAAlB;AACA,OAAOC,IAAP,MAAiB,yCAAjB;AACA,SACIC,iBADJ,EAEIC,mBAFJ,QAGO,8BAHP;AAKA,SAAQC,OAAR,QAAsB,8BAAtB;AACA,SAAQC,aAAR,QAA4B,8BAA5B;AACA,SAAQC,WAAR,QAA0B,mCAA1B;AACA,OAAOC,cAAP,MAA2B,mDAA3B;AACA,OAAOC,UAAP,MAAuB,+CAAvB;AACA,OAAO,gBAAP;;;AAEA,MAAMC,UAAU,GAAG,MAAM;EAAA;;EACrB,MAAMC,IAAI,GAAGd,UAAU,CAACU,WAAD,CAAvB;EACA,MAAM;IAACK,SAAD;IAAYC,KAAZ;IAAmBC,WAAnB;IAAgCC;EAAhC,IAA8CT,aAAa,EAAjE;EACA,MAAM,CAACU,UAAD,EAAaC,aAAb,IAA+BrB,QAAQ,EAA7C;EACA,MAAMsB,MAAM,GAAGpB,SAAS,GAAGoB,MAA3B;EACA,MAAMC,OAAO,GAAGpB,UAAU,EAA1B;EACA,MAAM,CAACqB,SAAD,EAAYC,YAAZ,EAA0BC,WAA1B,IAAyCjB,OAAO,CAClD;IACIkB,KAAK,EAAE;MACHC,KAAK,EAAE,EADJ;MAEHC,OAAO,EAAE;IAFN,CADX;IAKIC,WAAW,EAAE;MACTF,KAAK,EAAE,EADE;MAETC,OAAO,EAAE;IAFA;EALjB,CADkD,EAUnD,KAVmD,CAAtD;EAYA9B,SAAS,CAAC,MAAM;IACZ,MAAMgC,SAAS,GAAG,YAAY;MAC1B,IAAI;QACA,MAAMC,YAAY,GAAG,MAAMd,WAAW,CAAE,mCAAkCI,MAAO,EAA3C,CAAtC;QACAD,aAAa,CAACW,YAAY,CAACC,IAAd,CAAb;QACAP,WAAW,CACP;UACIC,KAAK,EAAE;YACHC,KAAK,EAAEI,YAAY,CAACC,IAAb,CAAkBN,KADtB;YAEHE,OAAO,EAAE;UAFN,CADX;UAKIC,WAAW,EAAE;YACTF,KAAK,EAAEI,YAAY,CAACC,IAAb,CAAkBH,WADhB;YAETD,OAAO,EAAE;UAFA;QALjB,CADO,EAUJ,IAVI,CAAX;MAYH,CAfD,CAeE,OAAOK,GAAP,EAAY,CAAE;IACnB,CAjBD;;IAkBAH,SAAS;EACZ,CApBQ,EAoBP,CAACb,WAAD,EAAcI,MAAd,EAAsBI,WAAtB,CApBO,CAAT;;EAuBA,MAAMS,uBAAuB,GAAG,MAAMC,KAAN,IAAe;IAC3CA,KAAK,CAACC,cAAN;;IACA,IAAI;MACA,MAAMnB,WAAW,CACZ,mCAAkCI,MAAO,EAD7B,EAEb,OAFa,EAGbgB,IAAI,CAACC,SAAL,CAAe;QACXZ,KAAK,EAAEH,SAAS,CAACgB,MAAV,CAAiBb,KAAjB,CAAuBC,KADnB;QAEXE,WAAW,EAAEN,SAAS,CAACgB,MAAV,CAAiBV,WAAjB,CAA6BF;MAF/B,CAAf,CAHa,EAOb;QACI,gBAAgB,kBADpB;QAEIa,aAAa,EAAE,YAAY1B,IAAI,CAAC2B;MAFpC,CAPa,CAAjB;MAYAnB,OAAO,CAACoB,MAAR;IACH,CAdD,CAcE,OAAOT,GAAP,EAAY,CAAE;EACnB,CAjBD;;EAmBA,IAAIlB,SAAJ,EAAe;IACX,oBACI;MAAK,SAAS,EAAC,QAAf;MAAA,uBACI,QAAC,cAAD;QAAA;QAAA;QAAA;MAAA;IADJ;MAAA;MAAA;MAAA;IAAA,QADJ;EAKH;;EAED,IAAG,CAACI,UAAD,IAAe,CAACH,KAAnB,EAA0B;IACtB,oBACI;MAAK,SAAS,EAAC,QAAf;MAAA,uBACI,QAAC,IAAD;QAAA,uBACI;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MADJ;QAAA;QAAA;QAAA;MAAA;IADJ;MAAA;MAAA;MAAA;IAAA,QADJ;EAOH;;EAED,oBACI,QAAC,KAAD,CAAO,QAAP;IAAA,wBACI,QAAC,UAAD;MAAY,KAAK,EAAEA,KAAnB;MAA0B,OAAO,EAAEE;IAAnC;MAAA;MAAA;MAAA;IAAA,QADJ,EAEK,CAACH,SAAD,IAAcI,UAAd,iBACG;MAAM,SAAS,EAAC,WAAhB;MAA4B,QAAQ,EAAEe,uBAAtC;MAAA,wBACA,QAAC,KAAD;QACI,EAAE,EAAC,OADP;QAEI,OAAO,EAAC,OAFZ;QAGI,IAAI,EAAC,MAHT;QAII,KAAK,EAAC,OAJV;QAKI,UAAU,EAAE,CAAC5B,iBAAiB,EAAlB,CALhB;QAMI,SAAS,EAAC,6BANd;QAOI,OAAO,EAAEkB,YAPb;QAQI,YAAY,EAAEL,UAAU,CAACO,KAR7B;QASI,YAAY,EAAE;MATlB;QAAA;QAAA;QAAA;MAAA,QADA,eAYA,QAAC,KAAD;QACI,EAAE,EAAC,aADP;QAEI,OAAO,EAAC,UAFZ;QAGI,KAAK,EAAC,aAHV;QAII,UAAU,EAAE,CAACnB,mBAAmB,CAAC,CAAD,CAApB,CAJhB;QAKI,SAAS,EAAC,uDALd;QAMI,OAAO,EAAEiB,YANb;QAOI,YAAY,EAAEL,UAAU,CAACU,WAP7B;QAQI,YAAY,EAAE;MARlB;QAAA;QAAA;QAAA;MAAA,QAZA,eAsBA,QAAC,MAAD;QAAQ,IAAI,EAAC,QAAb;QAAsB,QAAQ,EAAE,CAACN,SAAS,CAACK,OAA3C;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAtBA;IAAA;MAAA;MAAA;MAAA;IAAA,QAHR;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AAiCH,CA/GD;;GAAMf,U;UAEkDJ,a,EAErCR,S,EACCC,U,EAC+BM,O;;;KAN7CK,U;AAiHN,eAAeA,UAAf"},"metadata":{},"sourceType":"module"}